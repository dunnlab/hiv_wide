---
title: "Figures for manuscript"
output:
    bookdown::html_document2:
    df_print: paged
    code_folding: hide

#    pdf:
#        documentclass: report
#        keep-tex: true
        


execute:
    enabled: true
    cache: true
---

```{r setup, include=FALSE}
library(treeio)
library(tidytree)
library(ggtree)
library(ape)
library(parallel)
library(tidyverse)
library(future)
library(future.apply)
library(plotly)
library(reshape)
library(kableExtra)
library(assertr) 
library(here)
library(TreeDist)
library(aricode)
#library(listenv)
set.seed(5871757)
plan(multisession, workers=8)
#PATH="/gpfs/data/cbc/aguang/hiv_wide"
PATH="~/CORE/kantorlab/hiv_wide"
setwd(PATH)
here::i_am("notebooks/figures.qmd")
RDATA=file.path(PATH,"data/Rdata")
knitr::opts_knit$set(root.dir = PATH)
all_tree_bootstraps <-
  readRDS(file=file.path(RDATA,"all_tree_bootstraps_subtypeB.rds"))

adists <- readRDS(file=file.path(RDATA,"alignment_dists.rds"))

treenames <- c("wgs90", "wgs80", "wgs70", "wgs60", "wgs50", "wgs40", "wgs30", "wgs20", "wgs10", "pol", "wgs100")
ALIGNMENT_PATH = file.path(PATH,"results/alignments")
alignmentfiles <- list.files(ALIGNMENT_PATH, ".fa$", full.names=TRUE)
alignments <- lapply(alignmentfiles, read.FASTA)
names(alignments) <- treenames

RPATH=file.path(PATH,"R")
source(file.path(RPATH,"cluster.R"))
source(file.path(RPATH,"loadparams.R"))
source(file.path(RPATH, "loadtree.R"))
source(file.path(RPATH, "max_gendist.R"))
```

```{r loadtrees, include=FALSE}
treefiles <- list.files(file.path(PATH,"results/trees"),".fa.treefile",full.names=TRUE)
trees <- lapply(treefiles, read.iqtree)
names(trees) <- c("wgs90", "wgs80", "wgs70", "wgs60", "wgs50", "wgs40", "wgs30", "wgs20", "wgs10", "pol", "wgs")
phylos <- lapply(trees, function(x) x@phylo)
bipartitions <- prop.part(phylos)
labels <- lapply(1:length(bipartitions), function(x) attributes(bipartitions)$labels[bipartitions[x][[1]]] %>% sort)

# maskgp120
maskgp120_names <- c("maskgp120_wgs90", "maskgp120_wgs80", "maskgp120_wgs70", "maskgp120_wgs60", "maskgp120_wgs50", "maskgp120_wgs40", "maskgp120_wgs30", "maskgp120_wgs20", "maskgp120_wgs10", "maskgp120_pol", "maskgp120_wgs", "wgs")
maskgp120 <- loadtree(file.path(PATH,"results/trees/maskgp120"), maskgp120_names)
maskgp120_phylos <- maskgp120[[1]]
maskgp120_labels <- maskgp120[[2]]

# sampletrees
folders <- list.files(file.path(PATH,"results/trees/samples"), full.names=TRUE)
sampletrees <- future_lapply(folders, function(x) {
    loadtree(x,treenames, trees$wgs)
})
sampletrees <- Filter(Negate(is.null), sampletrees)

# fixedparamtrees
fpfolders <- list.files(file.path(PATH,"results/trees/fixedparams"), full.names=TRUE)[1:50]
fptrees <- future_lapply(fpfolders, function(x) {
    loadtree(x, treenames, trees$wgs)
})
fptrees <- Filter(Negate(is.null), fptrees)
```

# Overview

There are 11 different mixtures of alignments: whole genome, 10% wgs-90% pol, 20% wgs-80% pol, and so on up until 100% pol. For the mixtures i.e. 10% wgs-90% pol up to 100% pol, we created 1000 samples of each by using different seeds to randomize the rows (sequences) and start the masking procedure. Then we inferred trees with iqtree, leading to 1000 sets of tree mixtures. There are `r length(trees[[1]]@phylo$tip.label)` tips on these trees, which comprise all subtype B.

Running this notebook should reproduce all figures in the manuscript as long as the appropriate packages are installed. Some code for additional results and for different sections are included as well.

# Main findings

-   Distance between mixture trees and wgs tree remains around the same up to `wgs50`, then steadily decreases (i.e. mixture gets closer to wgs tree)
-   Congruence between bootstrap values on mixture trees and wgs tree is minimal at `wgs60`.
-   In terms of congruence between `pol` and the mixtures with clusters identified with pol, there is a dip to `wgs60`, and then congruence increases again. (Figures \@ref(fig:lineplot-clusterpicker) and \@ref(fig:heatmap-clusterpicker-bootstrap))

# Setup code chunks

We have a series of setup code chunks:

-   `setup:` Loads packages, all tree bootstraps (the most compute-intensive part so was saved as an object), alignment distanmces, manuscript specific code
-   `loadtrees:` Loads all trees, including maskgp120, samples, fixed parameter trees
-   `cluster_picker_load`, `alignment_load`, `get_bootstrap`: not run, creates objects loaded in `setup` and `loadtrees`
-   `make_data_frame:` We put the trees into a dataframe that has as columns: the percent of full genome (0 through 100), the partition (as produced by prop.part), the bootstrap value of that partition (NA if doesn't exist in tree for percent of full genome, otherwise bootstrap value). For code, see actual notebook file.

```{r alignment_load, include=FALSE, eval=FALSE}
# creates alignment object (not run)
adists <- future_lapply(alignments, function(x) dist.dna(x, model="TN93"))
saveRDS(adists, file=file.path(PATH,"alignment_dists.rds"))
```

```{r get-bootstrap, eval=FALSE, echo=FALSE}
# inputs:
#   bipart - bipartition with labels
#   t - tree index
bootstrap_helper %<-% function(bipart, t) {
    if(is.monophyletic(phylos[[t]],bipart)) {
        mrca <- ggtree::MRCA(trees[[t]], bipart)
        boot <- dplyr::filter(trees[[t]]@data, node==mrca)$UFboot
        return(list(bipart, boot))
    }
} 

#bootstrap %<-% mclapply(labels, function(x) bootstrap_helper(x, 1))

bootstrap <- function(t) {
    future_lapply(labels, function(x) bootstrap_helper(x, t))
}

all_tree_bootstraps <- lapply(1:length(trees), bootstrap)
saveRDS(all_tree_bootstraps, file=file.path(PATH,"all_tree_bootstraps_subtypeB.rds"))
```

```{r, make_data_frame, echo=FALSE}
# it looks like each element in each list in all_tree_bootstraps is the same partition which is nice. So we want to save the name of the partition, and the number if it's the second value, or NA if it doesn't exist/the value is NULL

# labels is the actual list of labels

# in order to do that we have to first create a list replacement so that each element of the list has 2 elements itself
replace_null <- function(x) {
  # get number of NULL values in bootstrap list
  num_null <- sapply(x, is.null) %>% sum()
  # make list that we will use to replace, split forms them into pairs
  list_replace <- rep(list(NA,NA), num_null)
  list_replace <- split(list_replace, factor(c(1:num_null,1:num_null)))
  
  x[sapply(x,is.null)] <- list_replace
  return(x)
}

only_bootstraps <- lapply(all_tree_bootstraps, function(x)
  sapply(replace_null(x), "[[", 2))
names(only_bootstraps) <- treenames
bootstrap_df <- data.frame(only_bootstraps)
bootstrap_df$labelind <- 1:nrow(bootstrap_df)
```

We keep the labels separate from the dataframe for now because the names are extremely messy to keep as rows.

# Figure 1: How similar are the trees?

```{r otherattempts, echo=FALSE, eval=FALSE}
#library(phangorn)
#initially we had tried geodesic distance but gave us this error
#library(distory)
#test <- sapply(samplephylos[1]$wgs90$tip.label %>% strsplit("\\."), function(x) x[3])
#test <- test %>% as.numeric()
#min(test[test > 20], na.rm=TRUE) #79
#which(test==79) #105
#samplephylos[1]$wgs90$tip.label[105] #"B.US.79.NYC4.KJ704792"
#> dist.multiPhylo(samplephylos, outgroup="B.US.79.NYC4.KJ704792")
#Error in dist.multiPhylo(x, method = method, force.multi2di = force.multi2di,  : 
#  An error was encountered in parsing near position 32: Couldn't figure out what to do after a first leaf entry 
# actually I have an email from Emmanuel Paradis about it but I never implemented the fix
```


```{r fig1_rfdist, fig.cap="RF distances between all phylogenetic tree mixtures and the wgs tree. Closer to 0 on the y-axis is closer to the wgs tree, further is further away.", warning=FALSE}
dists <- lapply(sampletrees, function(x) {
    just_trees <- lapply(x[[1]], function(y) y@phylo)[c(11,1,2,3,4,5,6,7,8,9,10)]
    class(just_trees) <- "multiPhylo"
    tree_rfdist <- dist.topo(just_trees)
    #tree_rfdist <- RobinsonFoulds(just_trees, normalize=TRUE)
    #tree_rfdist <- RF.dist(just_trees, normalize=TRUE, check.labels=FALSE)
    melt(as.matrix(tree_rfdist), varnames = c("row", "col"))
})
df_dists <- bind_rows(dists, .id="id")
#tiff(filename=file.path(PATH,"figures/fig1.tif"),res=300,width=1600,height=1200)
ggplot(filter(df_dists, row=="wgs100" & value != 0), aes(x=col, y=value)) + geom_boxplot() + geom_jitter(aes(alpha=0.5)) + xlab("Mixture") + ylab("Robinson-Foulds Distance") + theme_bw() + theme(legend.position="none")
#dev.off()
```

We compute the RF distance between all of our phylogenetic tree samples and create a boxplot for them (Figure \@ref{fig:fig1_rfdist}). It does appear that the pol tree is most similar to the pol10-wgs90 tree, and that the RF distance increases as the wgs proportion increases.

```{r rf_stats}
wgs50_dist <- filter(df_dists, row=="wgs100" & col=="wgs50")$value
pol_dist <- filter(df_dists, row=="wgs100" & col=="pol")$value
wgs40_dist <- filter(df_dists, row=="wgs100" & col=="wgs40")$value
wgs30_dist <- filter(df_dists, row=="wgs100" & col=="wgs30")$value
t.test(wgs50_dist)
t.test(wgs50_dist, pol_dist, paired=TRUE, alternative="less")
```

# Figure 2: PCoA of tree distances

```{r fig2_pcoa}
#samplephylos <- lapply(sample.int(length(sampletrees), 20), function(x) lapply(sampletrees[[x]][[1]], as.phylo)) %>% purrr::flatten()
#distances <- ClusteringInfoDistance(samplephylos)
#distances_normalized <- ClusteringInfoDistance(samplephylos, normalize=TRUE)
#write_rds(file=file.path(RDATA,"clustering_sample_distances.rds"),distances)
distances <- read_rds(file=file.path(RDATA, "clustering_sample_distances.rds"))

test_dist <- as.matrix(distances)[-c(11,22,33,44,55,66,77,88,99,110,121,132,143,154,165,176,187,198,209),-c(11,22,33,44,55,66,77,88,99,110,121,132,143,154,165,176,187,198,209)]
pcoa <- cmdscale(test_dist, eig=TRUE, k=12)
mapping <- pcoa$points[,1:2]
#mapping <- pcoa$points[,2:3]
mix <- rownames(mapping)
mapping <- data.frame(mapping, Mixture=mix)

tiff(filename=file.path(PATH,"figures/fig2.tif"),res=300,width=1600,height=1600)
ggplot(mapping) + geom_point(aes(x=X1, y=X2, color=Mixture)) + theme_bw() + coord_fixed(xlim=c(-60,60),ylim=c(-60,60)) +
    labs(color="Mixture") + xlab("X (8.09% Percent Variance)") + ylab("Y (2.59% Percent Variance)")
dev.off()
```

Figure \@ref{fig:fig2_pcoa}. To get the percent variance, we took the eigenvalues of the `pcoa` object and divided the first 2 by the total sum:

 * `pcoa$eig[1]/sum(pcoa$eig)`: `r pcoa$eig[1]/sum(pcoa$eig)`
 * `pcoa$eig[2]/sum(pcoa$eig)`: `r pcoa$eig[2]/sum(pcoa$eig)`

```{r testdist_txc, eval=FALSE, include=FALSE}
# txc stuff in conversation with author
txc <- vapply(seq_len(ncol(cmdscale(test_dist, k=12))), function(k) {
    newDist <- dist(cmdscale(test_dist, k=12)[, seq_len(k)])
    MappingQuality(test_dist, newDist, 10)["TxC"]
}, 0)
ggplot(data.frame(dim=1:2,txc=txc)) + geom_point(aes(x=dim,y=txc)) + theme_bw() + geom_hline(yintercept=0.9, linetype=2)

set.seed(45)
tsne_out <- Rtsne::Rtsne(test_dist, dims=3, theta=0.01, k=12, is_distance=TRUE)
tsne_out_y <- tsne_out$Y
tsne_out_y <- data.frame(tsne_out_y, Mixture=mix)
ggplot(tsne_out_y) + geom_point(aes(x=X1,y=X2,color=Mixture)) + theme_bw() + theme(legend.position="none")
txc <- vapply(seq_len(ncol(tsne_out$Y)), function(k) {
    newDist <- dist(tsne_out$Y[, seq_len(k)])
    MappingQuality(test_dist, newDist, 10)["TxC"]
}, 0)
ggplot(data.frame(dim=1:3,txc=txc)) + geom_point(aes(x=dim,y=txc)) + theme_bw() + geom_hline(yintercept=0.9, linetype=2)
```

# Clustering results

```{r samples_allclusters, include=FALSE}
# samples_allclusters <- lapply(sampletrees, function(z) {
#     phylos <- z[[1]]
#     labels <- z[[2]]
#     allclusters <- lapply(threshold, function(y) future_lapply(phylos, function(x) cluster(x, y, labels)))
#     names(allclusters) <- threshold
#     allclusters
#     })
# saveRDS(samples_allclusters, file=file.path(RDATA,"samples_allclusters.rds"))
samples_allclusters <- readRDS(file.path(RDATA,"samples_allclusters.rds"))
```

## Figure 3: Clustering changes with mixtures and bootstraps

```{r clustermetrics}
# number of total clusters
samples_totalclust <- lapply(samples_allclusters, function(threshold) {
    tcdf <- sapply(threshold, function(y) sapply(y, function(x) length(x[[3]]))) %>%
        data.frame()
    names(tcdf) <- c("70","80","85","90","95","99")
    tcdf$tree <- rownames(tcdf)
    tcdf <- pivot_longer(tcdf, cols=c("70","80","85","90","95","99"), names_to="bootstrap",values_to="totalclust")
    return(tcdf)
})
samples_totalclust <- bind_rows(samples_totalclust, .id="id")
samples_totalclust$tree[samples_totalclust$tree=="wgs"] <- "wgs100"
samples_totalclust$tree <- factor(samples_totalclust$tree, levels=c("pol","wgs10","wgs20","wgs30","wgs40","wgs50","wgs60","wgs70","wgs80","wgs90","wgs100"))
samples_totalclust$numerical_tree <- c(0,10,20,30,40,50,60,70,80,90,100)[match(samples_totalclust$tree, treenames)]

# size of clusters
samples_clustsize <- lapply(samples_allclusters, function(sample) {
    df <- lapply(sample, function(threshold) {
        sizes <- sapply(threshold, function(y) sapply(y[[1]], length))
        sizes_df <- bind_rows(lapply(sizes, data.frame), .id="tree")
        colnames(sizes_df) <- c("tree", "size")
        return(sizes_df)
    })
    df <- bind_rows(df, .id="threshold")
    return(df)
})
samples_clustsize <- bind_rows(samples_clustsize, .id="id")
samples_clustsize$tree[samples_clustsize$tree=="wgs"] <- "wgs100"
samples_clustsize$tree <- factor(samples_clustsize$tree, levels=c("pol","wgs10","wgs20","wgs30","wgs40","wgs50","wgs60","wgs70","wgs80","wgs90","wgs100"))
colnames(samples_clustsize) <- c("id", "bootstrap", "tree", "size")
samples_clustsize$numerical_tree <- c(0,10,20,30,40,50,60,70,80,90,100)[match(samples_clustsize$tree, treenames)]
```

For the number of clusters and size of clusters, we compute two dataframes, `samples_totalclust` and `samples_clustsize`. The `samples_totalclust` will be used later as well to help compute AMI, but for `sample_clustsize` we will compute the mean cluster size to summarize the cluster size distribution in a dataframe `samples_mean_clustsize`. In general all of them follow a Poisson distribution with mostly clusters of size 2, with larger clusters as more rare. (Supplementary Figure)

One sample, 15 was left out as it was a major outlier in cluster size:
`filter(samples_clustsize, id==15) %>% group_by(bootstrap, tree) %>% summarise(max=max(size))`.

For the cluster size and number of clusters, we make both a table and a side-by-side plot of cluster sizes and numbers.

```{r clustfilter}
samples_totalclust <- filter(samples_totalclust, id != 15)
samples_clustsize <- filter(samples_clustsize, id != 15)

samples_mean_clustsize <- samples_clustsize %>%
    group_by(id, bootstrap, tree) %>%
    summarise(mean=mean(size))
filter(samples_totalclust, id != 15) %>% group_by(bootstrap, tree) %>% summarise(mean=mean(totalclust)) %>% pivot_wider(names_from=tree, values_from=mean)

samples_clustchange <- left_join(samples_totalclust, samples_mean_clustsize)

library(patchwork)
p1 <- ggplot(samples_clustchange, aes(x=numerical_tree,y=totalclust)) + geom_jitter(aes(color=bootstrap)) + geom_smooth(aes(group=bootstrap,color=bootstrap)) +
    theme_bw() +
    xlab("wgs Percentage") +
    ylab("Cluster Number") +
    theme(legend.position="none") +
    ggtitle("Cluster Number")
p2 <- ggplot(samples_clustchange, aes(x=numerical_tree,y=mean,color=bootstrap)) + geom_jitter() + geom_smooth() +
    theme_bw() +
    xlab("wgs Percentage") +
    ylab("Mean Cluster Size") +
    ggtitle("Mean Cluster Size") +
    guides(color=guide_legend(title="Bootstrap"))
#tiff(filename=file.path(PATH,"figures/fig3.tif"),res=300,width=1800,height=1400)
p1 + p2 + plot_annotation(tag_levels = 'A')
#dev.off()
```

## Supplementary Table 1

The supplementary table is not fully reproducible, in the sense that the only way I could get the formatting correct onto a word doc was by doing a preview and then saving that file rather than the `flextable::save_as_docx()` function, which would always have the table go off of the page. But the data itself is reproducible from this notebook and can be saved as a csv, and the kbl table is viewable from this document as well.

```{r clust_table}
table_clustchange <- samples_clustchange %>% group_by(bootstrap, tree) %>%
    summarise("Mean Number of Clusters"=mean(totalclust), "Mean Cluster Size"=mean(mean)) %>%
    pivot_longer(names_to="stat", cols=c("Mean Number of Clusters","Mean Cluster Size")) %>%
    pivot_wider(names_from=tree, values_from=value)

library(flextable)
ft1 <- samples_clustchange %>%
    filter(id != 15) %>%
    group_by(bootstrap, tree) %>%
    summarise("Number"=mean(totalclust), "Size"=mean(mean)) %>%
    pivot_longer(names_to="stat", cols=c("Number","Size")) %>%
    pivot_wider(names_from=c(bootstrap,stat), values_from=value) %>%
    flextable() |>
    colformat_double() |>
    theme_vanilla() |>
    separate_header() %>%
    add_header_row(values=c("Mixture","Bootstrap"),
                   colwidths=c(1,12)) %>%
    labelizor(part="header",labels=c("tree"="")) %>%
    add_footer_lines("Mean number of clusters and cluster size at different bootstrap thresholds and mixtures. Each value is the mean over the set of mixture samples.") %>%
    set_caption(caption="Cluster statistics by mixture and threshold.") %>%
    fontsize(size=8.5, part="body") %>%
    fontsize(size=8.5, part="header") #%>%
    #set_table_properties(width=1, layout="autofit") %>%
    #print(preview="docx")

#save_as_docx(ft1,path="cluster_table.docx", pr_section=officer::prop_section(page_size=officer::page_size(orient="landscape")))

kbl(select(ungroup(table_clustchange),stat:wgs100), digits=3, col.names=c("Stat","pol","wgs10","wgs20","wgs30","wgs40","wgs50","wgs60","wgs70","wgs80","wgs90","wgs100"), caption="Mean number of clusters and cluster size at different bootstrap thresholds and mixtures. Each value is the mean over the samples run.") %>% pack_rows(index=c("Bootstrap=70"=2,"Bootstrap=80"=2,"Bootstrap=85"=2,"Bootstrap=90"=2,"Bootstrap=95"=2,"Bootstrap=99"=2),label_row_css = "background-color: #666; color: #fff;") %>% kable_paper("striped")

#kbl(select(ungroup(table_clustchange),stat:wgs100), digits=3, col.names=c("Stat","pol","wgs10","wgs20","wgs30","wgs40","wgs50","wgs60","wgs70","wgs80","wgs90","wgs100"), caption="Mean number of clusters and cluster size at different bootstrap thresholds and mixtures. Each value is the mean over the samples run.") %>% pack_rows(index=c("70"=2,"80"=2,"85"=2,"90"=2,"95"=2,"99"=2),label_row_css = "background-color: #666; color: #fff;") %>% kable_paper("striped")
```

```{r samples_clusters, eval=FALSE, echo=FALSE}
threshold <- c(70, 80, 85,90,95,99)

# number of common clusters = tp
samples_sharedclust <- lapply(samples_allclusters, function(threshold) {
    tdf <- sapply(threshold, function(y) sapply(y, function(x) intersect(x[[3]],y$wgs[[3]]) %>% length)) %>%
        data.frame()
    names(tdf) <- c("70","80","85","90","95","99")
    tdf$tree <- rownames(tdf)
    tdf <- pivot_longer(tdf, cols=c("70","80","85","90","95","99"), names_to="bootstrap", values_to="tp")
    return(tdf)
    })
samples_sharedclust <- bind_rows(samples_sharedclust, .id="id")

# number of total - common = clusters specific to given tree = fp
# number of wgs - common = clusters specific to wgs = fn
# https://stackoverflow.com/questions/50957998/mutate-inside-group-by-based-on-particular-row-inside-group
# number of possible clusters is number of nodes in tree which here we know is 1194
# 1194 - fn = tn
samples_cluster_compare <- samples_totalclust %>% left_join(samples_sharedclust) %>%
    mutate(fp=totalclust-tp) %>%
    group_by(bootstrap) %>%
    mutate(fn=totalclust[tree=="wgs"]-tp, tn=1194-fn, precision=tp/(tp+fp),recall=tp/(tp+fn))
samples_cluster_compare$tree <- factor(samples_cluster_compare$tree, order=TRUE, levels=c("pol","wgs10","wgs20","wgs30","wgs40","wgs50","wgs60","wgs70","wgs80","wgs90","wgs"))
samples_cluster_compare <- mutate(samples_cluster_compare, F1=(2*precision*recall)/(precision+recall))

ggplot(filter(samples_cluster_compare, tree!="wgs"),aes(y=precision,x=recall,color=tree)) + geom_boxplot() + facet_wrap(~bootstrap, scale="free")
```

# Figure 4: Clustering AMIs for trees

```{r ami_sharedclust, echo=FALSE}
samples_clustid <- lapply(samples_allclusters, function(sample) {
    tdf <- lapply(sample, function(threshold) {
        lapply(seq_along(threshold), function(n) {
            mix <- threshold[[n]]
            mixname <- names(threshold)[n]
            mixid <- mix[[2]]
            names(mixid) <- 1:length(mixid)
            mixdf <- unlist(mixid)
            mixdf <- data.frame(id=mixdf,clust=names(mixdf)) %>%
                mutate(clust=substr(clust,1,nchar(clust)-1))
            names(mixdf) <- c("id",mixname)
            return(mixdf)
            }) %>%
            reduce(full_join,by=c("id")) %>%
            replace(is.na(.),0) # replace all NAs
            })
    names(tdf) <- c("70","80","85","90","95","99")
    tdf <- bind_rows(tdf,.id="threshold")
    return(tdf)
    })
samples_AMI <- lapply(samples_clustid, function(sample) {
    sample %>% group_by(threshold) %>% summarise(across(wgs90:pol, ~AMI(.x,wgs))) %>%
        pivot_longer(cols=wgs90:pol, names_to="mix", values_to="AMI")
})
samples_AMImean <- bind_rows(samples_AMI,.id="id") %>% group_by(threshold,mix) %>% summarise(mAMI=mean(AMI))


# test4 <- bind_rows(samples_clustid[[1]], samples_clustid[[2]], samples_clustid[[3]], samples_clustid[[4]], .id="id") %>% group_by(threshold, id)
# 
# group_by(threshold) %>% summarise(across(wgs90:wgs, list(wgs=~AMI(.x,wgs),wgs90=~AMI(.x,wgs90),wgs80=~AMI(.x,wgs80),
#                                                                                   wgs70=~AMI(.x,wgs70),wgs60=~AMI(.x,wgs60),wgs50=~AMI(.x,wgs50),
#                                                                                   wgs40=~AMI(.x,wgs40),wgs30=~AMI(.x,wgs30),wgs20=~AMI(.x,wgs20),
#                                                                                   wgs10=~AMI(.x,wgs10),pol=~AMI(.x,pol)))) %>%
#     pivot_longer(cols=wgs90_wgs:wgs_pol,names_to="mix_mix",values_to="AMI") %>%
#     separate(col="mix_mix",into=c("mix1","mix2")) -> test
# test2 <- unite(test, "mix11", mix1, id, remove=FALSE) %>% unite("mix21", mix2, id)
#     autoplot(cmdscale(1-acast(filter(test,threshold==99),mix1~mix2,value.vaar="AMI"),eig=TRUE),label=TRUE)
#     
#     testmat <- left_join(filter(samples_clustid[[1]], threshold==99), filter(samples_clustid[[2]], threshold==99), by=c("threshold","id")) %>% left_join(filter(samples_clustid[[24]],threshold==99), by=c("threshold","id")) %>% replace(is.na(.),0)
#     
#     testami <- lapply(3:35, function(x) lapply(3:35, function(y) AMI(testmat[,x],testmat[,y])))
#     testami_mat <- acast(melt(testami),L2~L1)
#     ggplot(data.frame(cmdscale(1 - testami_mat),mix=c(treenames,treenames,treenames))) + geom_point(aes(x=X1,y=X2,color=mix)) + theme_bw()
#     
#                                                                                   """
# 

#tiff(filename=file.path(PATH,"figures/fig4.tif"),res=300,width=2000,height=1200)
ggplot(bind_rows(samples_AMI,.id="id") %>% filter(id != 15),aes(y=AMI,x=mix)) + geom_boxplot() + facet_wrap(~threshold) + xlab("Mixture") +
    theme_bw() +
    theme(axis.text.x=element_text(angle=90,vjust=0.5,hjust=1))
#dev.off()


samples_clustid_wgsonly <- lapply(samples_clustid, function(x) filter(x, wgs != 0))
samples_AMI_wgsonly <- lapply(samples_clustid_wgsonly, function(sample) {
     sample %>% group_by(threshold) %>% summarise(across(wgs90:pol, ~AMI(.x,wgs))) %>%
         pivot_longer(cols=wgs90:pol, names_to="mix", values_to="AMI")
 })
samples_AMImean_wgsonly <- bind_rows(samples_AMI_wgsonly,.id="id") %>% group_by(threshold,mix) %>% summarise(mAMI=mean(AMI))
```

```{r sampleclustid_test, eval=FALSE, echo=FALSE}
# playing around with plots but only test6 is rather interesting... about thresholds. Can basically see nothing when looking at tree to tree, it looks random as hell
test4 <- lapply(samples_clustid, function(x) {
    mutate(x, across(wgs90:pol, function(x) x==wgs)) %>% pivot_longer(wgs90:pol, names_to="tree", values_to="shared")
}) %>% bind_rows(.id="sample")
test5 <- test4 %>% group_by(threshold, id, tree) %>% summarise(prop=sum(shared)/n())
ggplot(test5, aes(x=id,y=tree,fill=prop)) + geom_raster() + facet_wrap(~threshold)

test6 <- test4 %>% group_by(threshold, id) %>% summarise(prop=sum(shared)/n())
ggplot(test6, aes(x=id, y=threshold, fill=prop)) + geom_raster()

test7 <- test4 %>% group_by(tree, id) %>% summarise(prop=sum(shared)/n())
ggplot(test7, aes(x=id, y=tree, fill=prop)) + geom_raster()
```

# Figure 5: wgs50 phylogeny colored by tip sequence type

```{r wgs50, echo=FALSE}
wgs50 <- trees[[5]]
wgs50align <- alignments$wgs50
alignmentnames <- names(alignments$wgs50)
firstwgs <- which(alignmentnames=="B.CN.02.02HNsc11.DQ007903")
polseqs <- alignmentnames[1:firstwgs-1]
wgsseqs <- alignmentnames[firstwgs:length(alignmentnames)]
# check last one of polseqs and random one
stopifnot(wgs50align[[polseqs[599]]][1:1000]==04)
stopifnot(wgs50align[[polseqs[300]]][1:1000]==04)
# check first, last, random wgsseq
stopifnot(!all(wgs50align[[wgsseqs[1]]][1:1000]==04))
stopifnot(!all(wgs50align[[wgsseqs[597]]][1:1000]==04))
stopifnot(!all(wgs50align[[wgsseqs[399]]][1:1000]==04))
seqtypedf <- data.frame(labels=alignmentnames, type=alignmentnames)
colnames(seqtypedf) <- c("Labels", "Type")
seqtypedf$Type[seqtypedf$Type %in% polseqs]<-"pol"
seqtypedf$Type[seqtypedf$Type %in% wgsseqs]<-"wgs"
testdf <- data.frame(labels=alignmentnames,dummy_bar_value=rep(1,length(alignmentnames)))
p2 <- ggtree(wgs50) %<+% seqtypedf + geom_tippoint(aes(color=Type))
#tiff(filename=file.path(PATH,"figures/fig5.tif"),res=300,width=1200,height=2000)
p2 + geom_facet(panel="Type",data=testdf,geom=geom_col,aes(x=dummy_bar_value,color=Type,fill=Type),orientation='y')
#dev.off()
```

# Figure 6 + supplementary: Substitution models for phylogeny

This generates several figures, 3 of them are supplementary and 1 is the actual figure.

```{r params}
# from R/loadparams.R
wgsparams <- paramsdf(file.path(PATH,"results/trees/HIV1_FLT_2018_genome_DNA_subtypeB.fa.iqtree"))
folders <- list.files(file.path(PATH,"results/trees/samples"))
sampleparams <- lapply(folders, function(x) {
    loadparams(file.path(PATH,"results/trees/samples",x))
})
sampleparams <- Filter(Negate(is.null), sampleparams)

paramdf <- lapply(sampleparams, function(x) bind_rows(x, .id="tree")) %>% bind_rows(., .id="id")
wgsparams$id <- 1000
wgsparams$tree <- "wgs100"
paramdf <- rbind(paramdf, wgsparams) %>%
    mutate(tree=fct_relevel(tree,"pol","wgs10","wgs20","wgs30","wgs40","wgs50","wgs60","wgs70","wgs80","wgs90","wgs100"))

#tiff(filename=file.path(PATH,"figures/fig6.tif"),res=300,width=2000,height=1200)
ggplot(filter(paramdf, Type=="Rate parameter R"), aes(x=tree,y=Value)) + geom_boxplot() + facet_wrap(~Param, scales="free_y") + xlab("Mixture") +
    ylab("Rate") + theme_bw() + theme(axis.text.x=element_text(angle=90,vjust=0.5,hjust=1))
#dev.off()
```

```{r params_statefreq}
#tiff(filename=file.path(PATH,"figures/sup_fig1.tif"),res=300,width=1600,height=1600)
ggplot(filter(paramdf, Type=="State freq"), aes(x=tree,y=Value)) + geom_boxplot() + facet_wrap(~Param, scales="free_y") + theme_bw() + theme(axis.text.x=element_text(angle=90,vjust=0.5,hjust=1))
#dev.off()
```

```{r params_relativerate}
#tiff(filename=file.path(PATH,"figures/sup_fig2.tif"),res=300,width=2000,height=1200)
ggplot(filter(paramdf, Type=="relative rate"), aes(x=tree,y=Value)) + geom_boxplot() + facet_wrap(~Param, scales="free_y") + theme_bw() + theme(axis.text.x=element_text(angle=90,vjust=0.5,hjust=1))
#dev.off()
```

```{r params_rrprop}
#tiff(filename=file.path(PATH,"figures/sup_fig3.tif"),res=300,width=2000,height=1200)
ggplot(filter(paramdf, Type=="rr proportion"), aes(x=tree,y=Value)) + geom_boxplot() + facet_wrap(~Param, scales="free_y") + theme_bw() + theme(axis.text.x=element_text(angle=90,vjust=0.5,hjust=1))
#dev.off()
```

```{r, rf_dist_fp, fig.cap="Sample to sample RF distances between all phylogenetic trees. Closer to yellow is farther away, and closer to green is closer.", warning=FALSE}
fpdists <- lapply(fptrees, function(x) {
    just_trees <- lapply(x[[1]], function(y) y@phylo)[c(11,1,2,3,4,5,6,7,8,9,10)]
    just_trees <- lapply(just_trees, function(y) {
        y$node.label <- NULL
        return(y)
        })
    # there is also one from 1979 in here?
    # sapply(just_trees$wgs$tip.label, function(x) stringr::str_split(x, pattern="\\.")[[1]][3]) %>% tabulate()
    # which(sapply(just_trees$wgs$tip.label, function(x) stringr::str_split(x, pattern="\\.")[[1]][3]) == "79")
    # B.US.79.NYC4.KJ704792 
    #             296 
    #just_trees <- lapply(just_trees, function(x) ape::root(x,outgroup="B.FR.83.HXB2_LAI_IIIB_BRU.K03455", resolve.root=TRUE))
    #just_trees <- lapply(just_trees, function(x) ape::root(x,outgroup="B.US.79.NYC4.KJ704792", resolve.root=TRUE))
    class(just_trees) <- "multiPhylo"
    tree_rfdist <- dist.topo(just_trees)
    #tree_geodist <- dist.multiPhylo(just_trees)
    melt(as.matrix(tree_rfdist), varnames = c("row", "col"))
    #melt(as.matrix(tree_geodist), varnames = c("row", "col"))
})
df_fpdists <- bind_rows(fpdists, .id="id")
ggplot(filter(df_fpdists, row=="wgs100" & value != 0), aes(x=col, y=value)) + geom_boxplot() + geom_jitter() + theme_bw() + theme(axis.text.x=element_text(angle=90,vjust=0.5,hjust=1))
```

```{r rfdist_samplefp, eval=FALSE}
lapply(1:4, function(x) {
    st <- sampletrees[[x]]
    st <- lapply(st[[1]], function(y) y@phylo)
    ft <- fptrees[[x]]
    ft <- lapply(ft[[1]], function(y) y@phylo)
    d <- mapply(dist.multiPhylo, st, ft)
})
```

## How many clusters are identified in each mixture compared to whole genome?

```{r wgs_clusters, cache=TRUE}
threshold <- c(70, 80, 85,90,95,99)
allclusters <- lapply(threshold, function(y) future_lapply(trees, function(x) cluster(x, y, labels)))
names(allclusters) <- threshold

# number of common clusters = tp
sharedclust <- lapply(allclusters, function(y) sapply(y, function(x) intersect(x[[3]],y$wgs[[3]]) %>% length))
tp <- data.frame(sharedclust)
names(tp) <- c("70","80","85","90","95","99")
tp$tree <- rownames(tp)
tp <- pivot_longer(tp, cols=c("70","80","85","90","95","99"), names_to="bootstrap", values_to="tp")
# number of total clusters
totalclust <- lapply(allclusters, function(y) sapply(y, function(x) length(x[[3]])))

# number of total - common = clusters specific to given tree = fp
fp <- data.frame(totalclust)
names(fp) <- c("70","80","85","90","95","99")
fp$tree <- rownames(fp)

# number of wgs - common = clusters specific to wgs = fn
# https://stackoverflow.com/questions/50957998/mutate-inside-group-by-based-on-particular-row-inside-group

# number of possible clusters is number of nodes in tree which here we know is 1194
# 1194 - fn = tn
cluster_compare <- pivot_longer(fp, cols=c("70","80","85","90","95","99"), names_to="bootstrap",values_to="totalclust") %>% left_join(tp) %>%
    mutate(fp=totalclust-tp) %>%
    group_by(bootstrap) %>%
    mutate(fn=totalclust[tree=="wgs"]-tp, tn=1194-fn, precision=tp/(tp+fp),recall=tp/(tp+fn))

ggplot(cluster_compare,aes(y=precision,x=recall)) + geom_line() + ggrepel::geom_label_repel(aes(label = tree), max.overlaps=20) + facet_wrap(~bootstrap) + scale_y_log10() + scale_x_log10()
```

```{r size_distro_clusters}
sizeclust <- lapply(allclusters, function(x) lapply(x, function(y) sapply(y[[1]], length)))
```

```{r maskgp120_clusters, cache=TRUE, eval=FALSE}
threshold <- c(70, 80, 85,90,95,99)
maskgp120_allclusters <- lapply(threshold, function(y) future_lapply(maskgp120_phylos, function(x) cluster(x, y, maskgp120_labels)))
names(allclusters) <- threshold

# number of common clusters = tp
sharedclust <- lapply(maskgp120_allclusters, function(y) sapply(y, function(x) intersect(x[[3]],y$wgs[[3]]) %>% length))
tp <- data.frame(sharedclust)
names(tp) <- c("70","80","85","90","95","99")
tp$tree <- rownames(tp)
tp <- pivot_longer(tp, cols=c("70","80","85","90","95","99"), names_to="bootstrap", values_to="tp")
# number of total clusters
totalclust <- lapply(maskgp120_allclusters, function(y) sapply(y, function(x) length(x[[3]])))

# number of total - common = clusters specific to given tree = fp
fp <- data.frame(totalclust)
names(fp) <- c("70","80","85","90","95","99")
fp$tree <- rownames(fp)

# number of wgs - common = clusters specific to wgs = fn
# https://stackoverflow.com/questions/50957998/mutate-inside-group-by-based-on-particular-row-inside-group

# number of possible clusters is number of nodes in tree which here we know is 1194
# 1194 - fn = tn
cluster_compare <- pivot_longer(fp, cols=c("70","80","85","90","95","99"), names_to="bootstrap",values_to="totalclust") %>% left_join(tp) %>%
    mutate(fp=totalclust-tp) %>%
    group_by(bootstrap) %>%
    mutate(fn=totalclust[tree=="wgs"]-tp, tn=1194-fn, precision=tp/(tp+fp),recall=tp/(tp+fn))

ggplot(cluster_compare,aes(y=precision,x=recall)) + geom_line() + ggrepel::geom_label_repel(aes(label = tree), max.overlaps=20) + facet_wrap(~bootstrap) + scale_y_log10() + scale_x_log10()
```
